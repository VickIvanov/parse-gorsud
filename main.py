import os
import time
import shutil
import subprocess
import hashlib
from pathlib import Path
from datetime import datetime
from tqdm import tqdm
from docx import Document

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==================
SOURCE_DIR = Path("data/test")  # –ü–∞–ø–∫–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
TXT_DIR = Path("data/test_txt")  # –ü–∞–ø–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
PROCESSED_DIR = Path("data/processed_files")  # –ü–∞–ø–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
LOG_FILE = Path(f"logs/conversion_log_{int(time.time())}.csv")  # –õ–æ–≥-—Ñ–∞–π–ª —Å timestamp
LOCK_FILE = Path("processing.lock")  # –§–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏


# ================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==================

def setup_environment():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–ø–æ–∫ –∏ lock-—Ñ–∞–π–ª–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        for folder in [SOURCE_DIR, TXT_DIR, PROCESSED_DIR]:
            folder.mkdir(exist_ok=True, parents=True)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π lock-—Ñ–∞–π–ª
        if LOCK_FILE.exists():
            LOCK_FILE.unlink()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π lock-—Ñ–∞–π–ª
        with open(LOCK_FILE, 'w') as f:
            f.write(str(os.getpid()))

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞
        with open(LOG_FILE, 'w', encoding='utf-8') as f:
            f.write("timestamp,human_time,operation,filename,details,filehash\n")

        return True
    except Exception as e:
        print(f"‚õî –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def get_file_hash(filepath):
    """–í—ã—á–∏—Å–ª—è–µ—Ç MD5 —Ö–µ—à —Ñ–∞–π–ª–∞"""
    try:
        with open(filepath, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()
    except:
        return "error"


def log_error(filename, message, filepath=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å —Ö–µ—à–µ–º —Ñ–∞–π–ª–∞"""
    timestamp, human_time = time.time(), datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    filehash = get_file_hash(filepath) if filepath else "none"
    with open(LOG_FILE, 'a', encoding='utf-8') as f:
        f.write(f"{timestamp},{human_time},ERROR,{filename},{message},{filehash}\n")


def log_success(operation, filename, details="", filepath=None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
    timestamp, human_time = time.time(), datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    filehash = get_file_hash(filepath) if filepath else "none"
    with open(LOG_FILE, 'a', encoding='utf-8') as f:
        f.write(f"{timestamp},{human_time},{operation},{filename},{details},{filehash}\n")


# ================== –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –§–ê–ô–õ–û–í ==================

def convert_docx(src_file, txt_file):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOCX –≤ TXT"""
    try:
        doc = Document(src_file)
        text = "\n".join(p.text for p in doc.paragraphs if p.text.strip())
        with open(txt_file, 'w', encoding='utf-8') as f:
            f.write(text)
        return True
    except Exception as e:
        log_error(src_file.name, f"DOCX error: {str(e)}", src_file)
        return False


def convert_doc_linux(src_file, txt_file):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOC –≤ TXT –¥–ª—è Linux/Mac"""
    try:
        # –ü—Ä–æ–±—É–µ–º antiword –∏–ª–∏ catdoc
        for cmd in ['antiword', 'catdoc']:
            if shutil.which(cmd):
                result = subprocess.run([cmd, str(src_file)],
                                        stdout=subprocess.PIPE,
                                        encoding='utf-8',
                                        errors='ignore')
                if result.returncode == 0:
                    with open(txt_file, 'w', encoding='utf-8') as f:
                        f.write(result.stdout)
                    return True
        return False
    except Exception as e:
        log_error(src_file.name, f"DOC linux error: {str(e)}", src_file)
        return False


def convert_doc_windows(src_file, txt_file):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è DOC –≤ TXT –¥–ª—è Windows"""
    try:
        import win32com.client
        word = win32com.client.Dispatch("Word.Application")
        word.Visible = False
        doc = word.Documents.Open(str(src_file.resolve()))
        doc.SaveAs(str(txt_file.resolve()), FileFormat=2)  # 2 = TXT format
        doc.Close()
        word.Quit()
        return True
    except Exception as e:
        log_error(src_file.name, f"DOC Windows error: {str(e)}", src_file)
        return False


def convert_rtf(src_file, txt_file):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è RTF –≤ TXT"""
    try:
        # –ü—Ä–æ–±—É–µ–º striprtf (–∫—Ä–æ—Å—Å-–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–π)
        try:
            from striprtf.striprtf import rtf_to_text
            with open(src_file, 'r', encoding='utf-8', errors='ignore') as f:
                text = rtf_to_text(f.read())
            with open(txt_file, 'w', encoding='utf-8') as f:
                f.write(text)
            log_success("RTF_CONVERT", src_file.name, "used striprtf", src_file)
            return True
        except ImportError:
            pass

        # –ü—Ä–æ–±—É–µ–º unrtf (Linux/Mac)
        if shutil.which('unrtf'):
            try:
                result = subprocess.run(['unrtf', '--text', str(src_file)],
                                        stdout=subprocess.PIPE,
                                        encoding='utf-8',
                                        errors='ignore')
                if result.returncode == 0:
                    text = result.stdout.split('----------')[0]  # –û—á–∏—Å—Ç–∫–∞ –≤—ã–≤–æ–¥–∞
                    with open(txt_file, 'w', encoding='utf-8') as f:
                        f.write(text)
                    log_success("RTF_CONVERT", src_file.name, "used unrtf", src_file)
                    return True
            except Exception as e:
                log_error(src_file.name, f"unrtf error: {str(e)}", src_file)

        # –†—É—á–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ RTF (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)
        try:
            import re
            with open(src_file, 'r', encoding='utf-8', errors='ignore') as f:
                text = f.read()
            clean_text = re.sub(r'\\[a-z]+[0-9]*|{[^}]+}|\\\'[0-9a-f]{2}', '', text)
            clean_text = re.sub(r'\n{3,}', '\n\n', clean_text)
            with open(txt_file, 'w', encoding='utf-8') as f:
                f.write(clean_text)
            log_success("RTF_CONVERT", src_file.name, "used manual cleanup", src_file)
            return True
        except Exception as e:
            log_error(src_file.name, f"RTF manual error: {str(e)}", src_file)
            return False

    except Exception as e:
        log_error(src_file.name, f"RTF conversion error: {str(e)}", src_file)
        return False


def convert_to_txt(src_file, txt_file):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    ext = src_file.suffix.lower()

    if ext == '.docx':
        return convert_docx(src_file, txt_file)
    elif ext == '.doc':
        if os.name == 'nt':
            return convert_doc_windows(src_file, txt_file)
        else:
            return convert_doc_linux(src_file, txt_file)
    elif ext == '.rtf':
        return convert_rtf(src_file, txt_file)
    else:
        log_error(src_file.name, f"Unsupported format: {ext}", src_file)
        return False


# ================== –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ==================

def process_file(filepath):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    try:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
        if filepath.suffix.lower() not in ('.doc', '.docx', '.rtf'):
            return False

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–æ–ø–∏—é
        temp_file = TXT_DIR / f"temp_{filepath.name}"
        shutil.copy2(filepath, temp_file)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
        txt_file = TXT_DIR / f"{filepath.stem}.txt"
        if convert_to_txt(temp_file, txt_file):
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
            processed_file = PROCESSED_DIR / filepath.name
            shutil.move(str(filepath), str(processed_file))
            log_success("CONVERTED", filepath.name, "", filepath)
            return True

        return False
    except Exception as e:
        log_error(filepath.name, f"Process error: {str(e)}", filepath)
        return False
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if 'temp_file' in locals() and temp_file.exists():
            try:
                temp_file.unlink()
            except:
                pass


# ================== –ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê ==================

def main():
    print(f"üîÑ –ó–∞–ø—É—Å–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏. –õ–æ–≥: {LOG_FILE}")
    if not setup_environment():
        return

    try:
        files = list(SOURCE_DIR.glob('*'))
        total_files = len(files)
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total_files}")

        success_count = 0
        for file in tqdm(files, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞"):
            if file.is_file():
                if process_file(file):
                    success_count += 1

        print(f"‚úÖ –ì–æ—Ç–æ–≤–æ. –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_files}")
    except KeyboardInterrupt:
        print("‚õî –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üî• –û—à–∏–±–∫–∞: {e}")
    finally:
        if LOCK_FILE.exists():
            LOCK_FILE.unlink()
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {LOG_FILE}")


if __name__ == "__main__":
    main()