#!/usr/bin/env python3
import asyncio
import logging
import signal
import pathlib
import os
from datetime import datetime
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.errors import SessionPasswordNeededError, FloodWaitError
from telethon.tl.types import User, PeerUser
from yandex_cloud_ml_sdk import YCloudML
from yandex_cloud_ml_sdk.search_indexes import (
    StaticIndexChunkingStrategy,
    TextSearchIndexType,
)


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞

    # Telegram API
    API_ID = int(os.getenv("TELEGRAM_API_ID"))
    API_HASH = os.getenv("TELEGRAM_API_HASH")
    PHONE = os.getenv("TELEGRAM_PHONE")
    TARGET_USERS = os.getenv("TARGET_USERS", "").split(",")  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

    # Yandex Cloud
    YANDEX_FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")
    YANDEX_AUTH_TOKEN = os.getenv("YANDEX_AUTH_TOKEN")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    SESSION_FILE = os.getenv("SESSION_FILE", "safe_session")
    DATA_PATH = os.getenv("DATA_PATH", "data/tours-example")
    LOGS_DIR = os.getenv("LOGS_DIR", "logs/telega")
    MESSAGE_DELAY = int(os.getenv("MESSAGE_DELAY", "3"))  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å–µ–∫—É–Ω–¥—ã)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    pathlib.Path(Config.LOGS_DIR).mkdir(parents=True, exist_ok=True)

    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

    # –§–∞–π–ª–æ–≤—ã–π –ª–æ–≥
    file_handler = logging.FileHandler(f"{Config.LOGS_DIR}/assistant.log")
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    return logger


logger = setup_logging()


def get_username(user: User) -> str:
    return user.username or str(user.id)


def write_to_user_log(username: str, message: str, is_assistant: bool = False):
    log_file = f"{Config.LOGS_DIR}/{username.lstrip('@')}.log"
    with open(log_file, 'a', encoding='utf-8') as f:
        prefix = "ASSISTANT" if is_assistant else "USER"
        f.write(f"[{datetime.now():%Y-%m-%d %H:%M:%S}] {prefix}: {message}\n")


async def initialize_telegram_client():
    client = TelegramClient(
        Config.SESSION_FILE,
        Config.API_ID,
        Config.API_HASH,
        device_model="PC 10.0",
        system_version="Linux",
        app_version="1.0.0",
        system_lang_code="ru"
    )

    try:
        await client.connect()

        if not await client.is_user_authorized():
            logger.info("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            await client.send_code_request(Config.PHONE)
            code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ")

            try:
                await client.sign_in(Config.PHONE, code)
            except SessionPasswordNeededError:
                password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA: ")
                await client.sign_in(password=password)

        logger.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        return client

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        raise


async def setup_yandex_assistant():
    sdk = YCloudML(
        folder_id=Config.YANDEX_FOLDER_ID,
        auth=Config.YANDEX_AUTH_TOKEN,
    )

    paths = pathlib.Path(Config.DATA_PATH).iterdir()
    files = [sdk.files.upload(path, ttl_days=5, expiration_policy="static") for path in paths]

    operation = sdk.search_indexes.create_deferred(
        files,
        index_type=TextSearchIndexType(
            chunking_strategy=StaticIndexChunkingStrategy(
                max_chunk_size_tokens=700,
                chunk_overlap_tokens=300,
            )
        ),
    )
    search_index = operation.wait()
    tool = sdk.tools.search_index(search_index)

    assistant = sdk.assistants.create(
        "yandexgpt",
        instruction="–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏. –û—Ç–≤–µ—á–∞–π –≤–µ–∂–ª–∏–≤–æ. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö –Ω–∏–∂–µ, –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –æ—Ç–≤–µ—Ç.",
        tools=[tool]
    )
    thread = sdk.threads.create()

    return sdk, assistant, thread, files, search_index


async def send_initial_messages(client, users):
    for user in users:
        try:
            await client.send_message(
                entity=user,
                message="ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
            )
            logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {get_username(user)}")
            await asyncio.sleep(Config.MESSAGE_DELAY)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è {get_username(user)}: {e}")


async def handle_message(event, assistant, thread, users):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —á–µ—Ä–µ–∑ event.get_sender()
        sender = await event.get_sender()
        if not sender:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ")
            return False

        username = get_username(sender)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ
        if not any(user.id == sender.id for user in users):
            logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}")
            return False

        message_text = event.message.text
        write_to_user_log(username, message_text)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}: {message_text}")

        if message_text.lower() == "exit":
            await event.reply("–ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
            return True  # –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        thread.write(message_text)
        run = assistant.run(thread)
        result = run.wait()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await event.reply(result.text)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {username}")

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        log_response = f"{result.text}\n"
        if hasattr(result, 'citations'):
            for i, citation in enumerate(result.citations, 1):
                for source in citation.sources:
                    if source.type == "filechunk":
                        log_response += (
                            f"–§—Ä–∞–≥–º–µ–Ω—Ç {i}:\n"
                            f"–§–∞–π–ª: {source.file.id}\n"
                            f"–¢–∏–ø: {source.file.mime_type}\n\n"
                        )
        write_to_user_log(username, log_response, is_assistant=True)
        return False

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}", exc_info=True)
        await event.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
        return False


async def run_assistant():
    client = None
    try:
        client = await initialize_telegram_client()
        yandex_objects = await setup_yandex_assistant()
        sdk, assistant, thread, files, search_index = yandex_objects

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = []
        for username in Config.TARGET_USERS:
            try:
                user = await client.get_entity(username)
                users.append(user)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_username(user)}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {username}: {e}")

        if not users:
            logger.error("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞")
            return

        await send_initial_messages(client, users)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        @client.on(events.NewMessage(incoming=True))
        async def handler(event):
            should_exit = await handle_message(event, assistant, thread, users)
            if should_exit:
                raise KeyboardInterrupt

        logger.info("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while True:
            await asyncio.sleep(1)

    except (KeyboardInterrupt, asyncio.CancelledError):
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        if client:
            await client.disconnect()
        logger.info("–†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


def handle_signal(sig, frame):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {sig}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    raise KeyboardInterrupt


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ["TELEGRAM_API_ID", "TELEGRAM_API_HASH", "TELEGRAM_PHONE",
                     "YANDEX_FOLDER_ID", "YANDEX_AUTH_TOKEN"]

    missing_vars = [var for var in required_vars if not os.getenv(var)]
    if missing_vars:
        print(f"–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ")
        exit(1)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –û–°
    signal.signal(signal.SIGINT, handle_signal)
    signal.signal(signal.SIGTERM, handle_signal)

    # –ó–∞–ø—É—Å–∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    asyncio.run(run_assistant())