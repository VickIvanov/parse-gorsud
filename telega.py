import os
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument
from telethon.errors import FloodWaitError

class Config:
    load_dotenv()
    API_ID = int(os.getenv("TELEGRAM_API_ID"))
    API_HASH = os.getenv("TELEGRAM_API_HASH")
    PHONE = os.getenv("TELEGRAM_PHONE")
    CHANNELS = ["dzen_kvartaly_a101", "lyublinskij_park","vick_test_channel"]
    DATA_DIR = "data_telega"
    SESSION_FILE = "safe_session"
    CHUNK_SIZE = 100  # –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    DELAY = 1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)


os.makedirs(Config.DATA_DIR, exist_ok=True)

def clean_api_hash():
    # –§—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –≤ .env
    pass


async def save_messages(channel, messages, is_history=False):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª"""
    filename = f"{Config.DATA_DIR}/{channel}_history.txt" if is_history else f"{Config.DATA_DIR}/{channel}_new.txt"

    with open(filename, 'a', encoding='utf-8') as f:
        for msg in messages:
            entry = f"{msg.date} | {msg.text or ''}"
            if msg.media:
                if isinstance(msg.media, MessageMediaPhoto):
                    entry += " <—Ñ–æ—Ç–æ>"
                elif isinstance(msg.media, MessageMediaDocument):
                    entry += " <–¥–æ–∫—É–º–µ–Ω—Ç>"
            f.write(f"{entry}\n")

    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {filename}")


async def fetch_history(client, channel):
    """–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {channel}...")
    all_messages = []
    offset_id = 0

    try:
        while True:
            messages = await client.get_messages(
                channel,
                limit=Config.CHUNK_SIZE,
                offset_id=offset_id
            )

            if not messages:
                break

            await save_messages(channel, messages, is_history=True)
            all_messages.extend(messages)
            offset_id = messages[-1].id

            await asyncio.sleep(Config.DELAY)

    except FloodWaitError as e:
        print(f"‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥ (–ª–∏–º–∏—Ç Telegram)")
        await asyncio.sleep(e.seconds)
        return await fetch_history(client, channel)

    return all_messages


async def monitor_new_messages(client):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    @client.on(events.NewMessage(chats=Config.CHANNELS))
    async def handler(event):
        await save_messages(event.chat.username, [event.message])

    print("üëÇ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await client.run_until_disconnected()


async def merge_files(channel):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π"""
    history_file = f"{Config.DATA_DIR}/{channel}_history.txt"
    new_file = f"{Config.DATA_DIR}/{channel}_new.txt"

    if os.path.exists(new_file):
        with open(new_file, 'r', encoding='utf-8') as f:
            new_messages = f.readlines()

        with open(history_file, 'a', encoding='utf-8') as f:
            f.writelines(new_messages)

        os.remove(new_file)
        print(f"üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è {channel}")


async def main():
    client = TelegramClient(
        Config.SESSION_FILE,
        Config.API_ID,
        Config.API_HASH,
        device_model="PC 10.0",
        system_version="Linux",
        app_version="1.0.0",
        system_lang_code="ru"
    )

    try:
        await client.start(phone=Config.PHONE)
        clean_api_hash()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        for channel in Config.CHANNELS:
            if not os.path.exists(f"{Config.DATA_DIR}/{channel}_history.txt"):
                await fetch_history(client, channel)
            else:
                print(f"‚úì –ò—Å—Ç–æ—Ä–∏—è {channel} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        monitor_task = asyncio.create_task(monitor_new_messages(client))

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∞–π–ª—ã
        while True:
            await asyncio.sleep(60 * 5)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            for channel in Config.CHANNELS:
                await merge_files(channel)

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await client.disconnect()


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üö™ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        # –ü–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∞–π–ª—ã
        for channel in Config.CHANNELS:
            asyncio.run(merge_files(channel))