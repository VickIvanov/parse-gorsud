import os
import asyncio
import json
from datetime import datetime
from dotenv import load_dotenv
import logging
import requests
from telethon import TelegramClient, events
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument
from telethon.errors import FloodWaitError

class Config:
    load_dotenv(encoding="windows-1251")  # —É–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É —Ñ–∞–π–ª–∞ .env
    API_ID = int(os.getenv("TELEGRAM_API_ID"))
    API_HASH = os.getenv("TELEGRAM_API_HASH")
    PHONE = os.getenv("TELEGRAM_PHONE")
    OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
    CHANNELS = ["dzen_kvartaly_a101", "lyublinskij_park","vick_test_channel"]
    DATA_DIR = "data_telega"
    SESSION_FILE = "safe_session"
    CHUNK_SIZE = 100  # –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    DELAY = 1  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
for var in ["HTTP_PROXY", "HTTPS_PROXY", "http_proxy", "https_proxy"]:
    os.environ.pop(var, None)

LOG_DIR = "logs/telega"
os.makedirs(LOG_DIR, exist_ok=True)
logging.basicConfig(
    filename=f"{LOG_DIR}/telega.log",
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    encoding="utf-8"
)

os.makedirs(Config.DATA_DIR, exist_ok=True)

def clean_api_hash():
    # –§—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ø–µ—Ä—å –≤ .env
    pass


async def save_messages(channel, messages, is_history=False):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª (–Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–µ—Ä—Ö—É)"""
    filename = f"{Config.DATA_DIR}/{channel}_history.txt" if is_history else f"{Config.DATA_DIR}/{channel}_new.txt"

    # –°–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    existing_messages = []
    if os.path.exists(filename):
        with open(filename, 'r', encoding='utf-8') as f:
            existing_messages = f.readlines()

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    new_entries = []
    for msg in messages:
        entry = f"{msg.date} | {msg.text or ''}"
        if msg.media:
            if isinstance(msg.media, MessageMediaPhoto):
                entry += " <—Ñ–æ—Ç–æ>"
            elif isinstance(msg.media, MessageMediaDocument):
                entry += " <–¥–æ–∫—É–º–µ–Ω—Ç>"
        new_entries.append(f"{entry}\n")

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–æ–≤—ã–µ –±—ã–ª–∏ —Å–≤–µ—Ä—Ö—É
    new_entries.sort(reverse=True, key=lambda x: x.split(' | ')[0])

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å –Ω–æ–≤—ã–º –ø–æ—Ä—è–¥–∫–æ–º: —Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ, –ø–æ—Ç–æ–º —Å—Ç–∞—Ä—ã–µ
    with open(filename, 'w', encoding='utf-8') as f:
        f.writelines(new_entries + existing_messages)

    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ {filename}")

async def fetch_history(client, channel):
    """–ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π"""
    print(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è {channel}...")
    all_messages = []
    offset_id = 0

    try:
        while True:
            messages = await client.get_messages(
                channel,
                limit=Config.CHUNK_SIZE,
                offset_id=offset_id
            )

            if not messages:
                break

            await save_messages(channel, messages, is_history=True)
            all_messages.extend(messages)
            offset_id = messages[-1].id

            await asyncio.sleep(Config.DELAY)

    except FloodWaitError as e:
        print(f"‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º {e.seconds} —Å–µ–∫—É–Ω–¥ (–ª–∏–º–∏—Ç Telegram)")
        await asyncio.sleep(e.seconds)
        return await fetch_history(client, channel)

    return all_messages


async def monitor_new_messages(client):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    @client.on(events.NewMessage(chats=Config.CHANNELS))
    async def handler(event):
        await save_messages(event.chat.username, [event.message])

    print("üëÇ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await client.run_until_disconnected()


async def merge_files(channel):
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π, —Å–æ—Ö—Ä–∞–Ω—è—è –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–µ—Ä—Ö—É"""
    history_file = f"{Config.DATA_DIR}/{channel}_history.txt"
    new_file = f"{Config.DATA_DIR}/{channel}_new.txt"

    if os.path.exists(new_file):
        # –°—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        with open(new_file, 'r', encoding='utf-8') as f:
            new_messages = f.readlines()

        # –°—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        history_messages = []
        if os.path.exists(history_file):
            with open(history_file, 'r', encoding='utf-8') as f:
                history_messages = f.readlines()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–æ–≤—ã–µ –≤–≤–µ—Ä—Ö—É)
        all_messages = new_messages + history_messages
        all_messages.sort(reverse=True, key=lambda x: x.split(' | ')[0] if ' | ' in x else '')

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏
        with open(history_file, 'w', encoding='utf-8') as f:
            f.writelines(all_messages)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(new_file)
        print(f"üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è {channel}")

async def get_all_chats(client):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤"""
    print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤...")
    dialogs = await client.get_dialogs()

    log_file = f"{Config.DATA_DIR}/all_chats_log.txt"
    with open(log_file, 'w', encoding='utf-8') as f:
        f.write(f"=== –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –Ω–∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===\n\n")
        for dialog in dialogs:
            chat_type = "–õ–∏—á–Ω—ã–π —á–∞—Ç" if dialog.is_user else "–ì—Ä—É–ø–ø–∞" if dialog.is_group else "–ö–∞–Ω–∞–ª"
            chat_id = dialog.entity.id
            chat_name = dialog.name
            username = getattr(dialog.entity, 'username', '–ù–µ—Ç username')
            username = username if username else '–ù–µ—Ç username'

            f.write(f"–¢–∏–ø: {chat_type}\n")
            f.write(f"ID: {chat_id}\n")
            f.write(f"–ò–º—è: {chat_name}\n")
            f.write(f"Username: {username}\n")
            f.write("-" * 50 + "\n")

    print(f"‚úÖ –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {log_file} (–≤—Å–µ–≥–æ {len(dialogs)} —á–∞—Ç–æ–≤)")

import logging
import os
import json
from datetime import datetime
import requests

async def process_all_private_chats(client, private_chats):
    for chat_id in private_chats:
        try:
            print(f"‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞ {chat_id}...")
            messages = await client.get_messages(chat_id, limit=15)
            if not messages:
                print(f"‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {chat_id}")
                continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
            chat_history = []
            for msg in reversed(messages):
                sender = "–Ø" if msg.out else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                content = msg.text or "<–º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç>"
                chat_history.append(f"{sender}: {content}")
            chat_text = "\n".join(chat_history)

            # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Groq
            prompt = (
                "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –ù–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –Ω–∏–∂–µ "
                "—Å–æ—Å—Ç–∞–≤—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å–µ–±–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ –ø–æ —Ç–µ–º–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è. "
                "–ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏. –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –∫–∞–≤—ã—á–µ–∫.\n\n"
                f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n{chat_text}"
            )

            GROQ_API_KEY = os.getenv("GROQ_API_KEY")
            GROQ_API_URL = "https://api.groq.com/openai/v1/chat/completions"
            headers = {
                "Authorization": f"Bearer {GROQ_API_KEY}",
                "Content-Type": "application/json"
            }
            payload = {
                "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
                "messages": [{"role": "user", "content": prompt}],
                "max_tokens": 100
            }

            logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Groq: {json.dumps(payload, ensure_ascii=False)}")
            response = requests.post(GROQ_API_URL, headers=headers, json=payload, timeout=30)
            logging.info(f"–û—Ç–≤–µ—Ç Groq: {response.status_code} {response.text}")
            print(response.status_code, response.text)
            response.raise_for_status()
            data = response.json()
            ai_response = data["choices"][0]["message"]["content"]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ —Ñ–∞–π–ª
            draft_file = f"{Config.DATA_DIR}/{chat_id}_draft.txt"
            with open(draft_file, 'w', encoding='utf-8') as f:
                f.write(f"=== –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {chat_id} –æ—Ç {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===\n\n")
                f.write(ai_response)
            logging.info(f"–ß–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {draft_file}")

            # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await client.get_entity(chat_id)
            username = getattr(user, 'username', None)
            if not username:
                username = f"id{user.id}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é megavick
            await client.send_message("megavick", ai_response)
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ megavick: {ai_response}")
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
            await client.send_message("megavick", f"–¥–ª—è @{username}")
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ megavick: –¥–ª—è @{username}")

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {chat_id}: {str(e)}")
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç–∞ {chat_id}: {str(e)}")

async def get_private_chats(client):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ (username –∏–ª–∏ id).
    """
    private_chats = []
    dialogs = await client.get_dialogs()
    for dialog in dialogs:
        if dialog.is_user:
            chat_id = dialog.entity.username or f"id{dialog.entity.id}"
            private_chats.append(chat_id)
    return private_chats

async def main():
    client = TelegramClient(
        Config.SESSION_FILE,
        Config.API_ID,
        Config.API_HASH,
        device_model="PC 10.0",
        system_version="Linux",
        app_version="1.0.0",
        system_lang_code="ru"
    )

    try:
        await client.start(phone=Config.PHONE)
        clean_api_hash()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
        await get_all_chats(client)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤
        private_chats = []
        dialogs = await client.get_dialogs()
        for dialog in dialogs:
            if dialog.is_user:
                chat_id = dialog.entity.username or f"id{dialog.entity.id}"
                private_chats.append(chat_id)

        print(f"üë• –ù–∞–π–¥–µ–Ω–æ {len(private_chats)} –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–∂–¥–æ–≥–æ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
        for chat_id in private_chats:
            print(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞—Ç–∞ {chat_id}...")
            try:
                messages = await client.get_messages(chat_id, limit=15)
                if messages:
                    await save_messages(chat_id, messages, is_history=True)
                    # –°–æ–∑–¥–∞—ë–º —á–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
                    await create_groq_draft(client, chat_id, messages)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {chat_id}: {str(e)}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        for channel in Config.CHANNELS:
            if not os.path.exists(f"{Config.DATA_DIR}/{channel}_history.txt"):
                await fetch_history(client, channel)
            else:
                print(f"‚úì –ò—Å—Ç–æ—Ä–∏—è {channel} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞–Ω–∞–ª—ã –∏ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        all_monitored_chats = Config.CHANNELS + private_chats

        @client.on(events.NewMessage(chats=all_monitored_chats))
        async def handler(event):
            try:
                if event.chat is None:
                    print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å event.chat=None: {event.message.id}")
                    if hasattr(event.message, 'peer_id') and hasattr(event.message.peer_id, 'user_id'):
                        user_id = event.message.peer_id.user_id
                        try:
                            user = await event.client.get_entity(user_id)
                            chat_id = user.username or f"id{user.id}"
                            print(f"üìù –û–ø—Ä–µ–¥–µ–ª—ë–Ω chat_id: {chat_id}")
                            await save_messages(chat_id, [event.message])
                            return
                        except Exception as e:
                            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                            chat_id = f"id{user_id}"
                            await save_messages(chat_id, [event.message])
                            return
                    debug_file = f"{Config.DATA_DIR}/unknown_messages_debug.txt"
                    with open(debug_file, 'a', encoding='utf-8') as f:
                        f.write(f"\n=== {event.message.date} | ID: {event.message.id} ===\n")
                        f.write(f"–¢–µ–∫—Å—Ç: {event.message.text or '<–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞>'}\n")
                else:
                    chat_id = event.chat.username or f"id{event.chat.id}"
                    await save_messages(chat_id, [event.message])
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

        print(f"üëÇ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {len(all_monitored_chats)} —á–∞—Ç–æ–≤...")
        monitor_task = asyncio.create_task(client.run_until_disconnected())

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∞–π–ª—ã
        while True:
            await asyncio.sleep(60 * 5)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            for channel in all_monitored_chats:
                await merge_files(channel)

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        await client.disconnect()

async def create_groq_draft(client, chat_id, messages):
    # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
    for var in ["HTTP_PROXY", "HTTPS_PROXY", "http_proxy", "https_proxy"]:
        os.environ.pop(var, None)
    print(f"ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –¥–ª—è {chat_id} —Å –ø–æ–º–æ—â—å—é Groq...")

    GROQ_API_KEY = os.getenv("GROQ_API_KEY")
    GROQ_API_URL = "https://api.groq.com/openai/v1/chat/completions"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
    chat_history = []
    for msg in reversed(messages):
        sender = "–Ø" if msg.out else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        content = msg.text or "<–º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç>"
        chat_history.append(f"{sender}: {content}")

    chat_text = "\n".join(chat_history)

    # –ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Groq –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    prompt = (
        "–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –ù–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –Ω–∏–∂–µ "
        "—Å–æ—Å—Ç–∞–≤—å –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —Å–µ–±–µ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á—Ç–æ-—Ç–æ –ø–æ–ª–µ–∑–Ω–æ–µ –ø–æ —Ç–µ–º–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è. "
        "–ü–∏—à–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏. –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π –∏ –∫–∞–≤—ã—á–µ–∫.\n\n"
        f"–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n{chat_text}"
    )

    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    payload = {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "messages": [{"role": "user", "content": prompt}],
        "max_tokens": 100
    }
    try:
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Groq: {json.dumps(payload, ensure_ascii=False)}")
        response = requests.post(GROQ_API_URL, headers=headers, json=payload, timeout=30)
        logging.info(f"–û—Ç–≤–µ—Ç Groq: {response.status_code} {response.text}")
        print(response.status_code, response.text)
        response.raise_for_status()
        data = response.json()
        ai_response = data["choices"][0]["message"]["content"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –≤ —Ñ–∞–π–ª
        draft_file = f"{Config.DATA_DIR}/{chat_id}_draft.txt"
        with open(draft_file, 'w', encoding='utf-8') as f:
            f.write(f"=== –ß–µ—Ä–Ω–æ–≤–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è {chat_id} –æ—Ç {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===\n\n")
            f.write(ai_response)

        print(f"‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {draft_file}")
        logging.info(f"–ß–µ—Ä–Ω–æ–≤–∏–∫ –¥–ª—è {chat_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {draft_file}")

        # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await client.get_entity(chat_id)
        username = getattr(user, 'username', None)
        if not username:
            username = f"id{user.id}"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é megavick
        await client.send_message("megavick", ai_response)
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ megavick: {ai_response}")
        await client.send_message("megavick", f"–¥–ª—è @{username}")
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ megavick: –¥–ª—è @{username}")

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {str(e)}")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞: {str(e)}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üö™ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
        # –ü–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ñ–∞–π–ª—ã
        all_monitored_chats = Config.CHANNELS + private_chats
        for channel in all_monitored_chats:
            asyncio.run(merge_files(channel))
    except NameError:
        print("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è private_chats –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")