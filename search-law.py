# !/usr/bin/env python3

from __future__ import annotations

import pathlib
import hashlib
import os
import requests, json
from typing import Dict, List, Optional
from dotenv import load_dotenv
from yandex_cloud_ml_sdk import YCloudML
from yandex_cloud_ml_sdk import YCloudML

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
FOLDER_ID = os.getenv("YANDEX_FOLDER_ID")  # ID –∫–∞—Ç–∞–ª–æ–≥–∞ Yandex Cloud
AUTH_TOKEN = os.getenv("YANDEX_AUTH_TOKEN")  # IAM-—Ç–æ–∫–µ–Ω –∏–ª–∏ API-–∫–ª—é—á
DATA_PATH = os.getenv("DATA_PATH", "data/test-law-norm")  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
ASSISTANT_NAME = os.getenv("ASSISTANT_NAME", "legal-assistant")  # –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞


# ===============================

class LegalAssistant:
    def __init__(self):
        self.sdk = YCloudML(folder_id=FOLDER_ID, auth=AUTH_TOKEN)
        self.existing_files: Dict[str, dict] = {}  # {filename: {id, hash}}
        self.current_file_ids: List[str] = []
        self.assistant_id: Optional[str] = None

    def _calculate_file_hash(self, file_path: pathlib.Path) -> str:
        """–í—ã—á–∏—Å–ª—è–µ–º SHA-256 —Ö–µ—à —Ñ–∞–π–ª–∞"""
        sha256_hash = hashlib.sha256()
        with open(file_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()

    def _get_existing_files(self):
        """–ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        files = {}
        try:
            print("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞...")
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —Å —Å–µ—Ä–≤–µ—Ä–∞
            all_files = list(self.sdk.files.list())
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {len(all_files)}")

            for file in all_files:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è —Ñ–∞–π–ª–∞
                    file_url = file.get_url()
                    file_name = file_url.split('/')[-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL

                    if file_name and file.description:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                        files[file_name] = {
                            'id': file.id,
                            'hash': file.description
                        }
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
                    continue

                if file.name and file.description:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                    try:
                        files[file.name] = {
                            'id': file.id,
                            'hash': file.description
                        }
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {file.name}: {str(e)}")
                        continue
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {str(e)}")

        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")
        return files

    def delete_all_cloud_files(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ REST API"""
        try:
            print("üîÑ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ –æ–±–ª–∞–∫–∞...")
            files = list(self.sdk.files.list())

            if not files:
                print("‚ÑπÔ∏è –í –æ–±–ª–∞–∫–µ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return True

            print(f"üóëÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            deleted_count = 0

            for file in files:
                if not file.id:
                    continue

                print(f"\n‚è≥ –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª:")
                print(f"  ID: {file.id}")
                print(f"  Name: {getattr(file, 'name', '–Ω/–¥')}")
                print(f"  URL: {getattr(file, 'get_url', lambda: '–Ω/–¥')()}")
                print(f"  Description: {getattr(file, 'description', '–Ω/–¥')}")
                print(f"  Status: {getattr(file, 'status', '–Ω/–¥')}")

                try:
                    delete_url = f"https://llm.api.cloud.yandex.net/v1/assistants/files/{file.id}"
                    print(f"  Delete URL: {delete_url}")

                    response = requests.delete(
                        delete_url,
                        headers={
                            "Authorization": f"Bearer {AUTH_TOKEN}",
                            "x-folder-id": FOLDER_ID,
                            "x-client-request-id": file.id
                        }
                    )

                    if response.status_code == 200 or response.status_code == 204:
                        deleted_count += 1
                        print("‚úÖ –£—Å–ø–µ—à–Ω–æ")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ API [{response.status_code}] {response.text}")

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

            print(f"\nüèÅ –ò—Ç–æ–≥: —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–∞–π–ª–æ–≤ –∏–∑ {len(files)}")
            return True

        except Exception as e:
            print(f"‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return False

    def upload_files(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º MIME-—Ç–∏–ø–∞"""
        paths = [p for p in pathlib.Path(DATA_PATH).iterdir()
                 if p.is_file() and p.suffix.lower() == '.txt']

        if not paths:
            print("‚ÑπÔ∏è –í –ø–∞–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ .txt —Ñ–∞–π–ª–æ–≤")
            return False

        self.existing_files = self._get_existing_files()
        new_files = 0

        for path in paths:
            file_name = path.name
            file_hash = self._calculate_file_hash(path)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª —Å—Ä–µ–¥–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ —Ö–µ—à
            if file_name in self.existing_files:
                existing_hash = self.existing_files[file_name]['hash']
                print(f"üìù –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è {file_name}:")
                print(f"  –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö–µ—à: {existing_hash}")
                print(f"  –ù–æ–≤—ã–π —Ö–µ—à: {file_hash}")
                if existing_hash == file_hash:
                    print(f"‚è© –§–∞–π–ª {file_name} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    if self.existing_files[file_name]['id'] not in self.current_file_ids:
                        self.current_file_ids.append(self.existing_files[file_name]['id'])
                    continue

            try:
                print(f"üìù –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è {file_name}:")
                print(f"  –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö–µ—à: {self.existing_files.get(file_name, {}).get('hash', '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}")
                print(f"  –ù–æ–≤—ã–π —Ö–µ—à: {file_hash}")
                print(f"‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ {file_name}...", end=' ')
                file = self.sdk.files.upload(
                    str(path.absolute()),
                    mime_type="text/plain",
                    description=file_hash  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–µ—à –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞
                )
                self.current_file_ids.append(file.id)
                self.existing_files[file_name] = {
                    'id': file.id,
                    'hash': file_hash
                }
                new_files += 1
                print("‚úÖ –£—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

        print(f"\n–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(self.current_file_ids)} ({new_files} –Ω–æ–≤—ã—Ö)")
        return bool(self.current_file_ids)

    def create_assistant(self):
        """–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        if not self.current_file_ids:
            print("‚ö†Ô∏è –ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
            return False

        try:
            assistants = self.sdk.assistants.list()
            for assistant in assistants:
                if assistant.name == ASSISTANT_NAME:
                    print(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç: {assistant.id}")
                    print("‚ÑπÔ∏è –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å")
                    return False
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {str(e)}")

        print("\nüë®‚Äçüíº –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
        try:
            assistant = self.sdk.assistants.create(
                name=ASSISTANT_NAME,
                model="yandexgpt",
                instruction="–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º. –û—Ç–≤–µ—á–∞–π —Ç–æ—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.",
                file_ids=self.current_file_ids
            )
            self.assistant_id = assistant.id
            print(f"ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {self.assistant_id}")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {str(e)}")
            return False

    def chat_loop(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º"""
        if not self.assistant_id:
            print("‚ö†Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return

        print("\nüí¨ –†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞. –í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")

        try:
            while True:
                input_text = input("\n–í—ã: ")
                if input_text.lower() == 'exit':
                    break

                thread = self.sdk.threads.create()
                thread.add_message(input_text)

                run = thread.runs.create(assistant_id=self.assistant_id)
                result = run.wait()

                if result.last_message:
                    print("\nü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:", result.last_message.text)

                thread.delete()

        except KeyboardInterrupt:
            print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if not FOLDER_ID:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω YANDEX_FOLDER_ID –≤ .env —Ñ–∞–π–ª–µ")
            return

        if not AUTH_TOKEN:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω YANDEX_AUTH_TOKEN –≤ .env —Ñ–∞–π–ª–µ")
            return

        if not self.upload_files():
            return

        if not self.create_assistant():
            return

        self.chat_loop()
        print("\nüèÅ –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

if __name__ == "__main__":
    assistant = LegalAssistant()
    assistant.delete_all_cloud_files()
    assistant.run()