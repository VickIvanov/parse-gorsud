import os
import shutil
from collections import defaultdict
from pathlib import Path
from datetime import datetime
import re

# ================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==================
SOURCE_DIR = Path("data/test")
DESTINATION_DIR = Path("data/output")
TEMP_DIR = Path("Z:/temp_files")  # –ë—É—Ñ–µ—Ä–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
LOG_FILE = Path(f"logs/rename_log_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv")


# ================== –§–£–ù–ö–¶–ò–ò ==================

def setup_environment():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–ø–æ–∫"""
    try:
        SOURCE_DIR.mkdir(exist_ok=True, parents=True)
        DESTINATION_DIR.mkdir(exist_ok=True, parents=True)
        LOG_FILE.parent.mkdir(exist_ok=True, parents=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–Ω–æ–π –ø–∞–ø–∫–∏
        if not TEMP_DIR.exists():
            print(f"‚ùå –ë—É—Ñ–µ—Ä–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {TEMP_DIR}")
            return False

        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        with open(LOG_FILE, 'w', encoding='utf-8') as f:
            f.write("timestamp,operation,original_name,temp_name,new_name,status,error\n")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False


def log_action(operation, original_name, temp_name="", new_name="", status="", error=""):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, 'a', encoding='utf-8') as f:
        f.write(f'"{timestamp}","{operation}","{original_name}","{temp_name}","{new_name}","{status}","{error}"\n')


def clean_filename(filename):
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    stem = Path(filename).stem

    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    stem = stem.strip()

    # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    stem = stem.replace('.', '_')

    # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    forbidden_chars = {
        '<': '(',
        '>': ')',
        ':': '_',
        '"': "'",
        '/': '_',
        '\\': '_',
        '|': '_',
        '?': '_',
        '*': '_',
        '\t': ' ',
        '\n': ' ',
        '\r': ' '
    }

    for char, replacement in forbidden_chars.items():
        stem = stem.replace(char, replacement)

    # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
    stem = re.sub(r'\s+', ' ', stem)
    stem = re.sub(r'_+', '_', stem)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(stem) > 200:
        stem = stem[:200]

    # –ï—Å–ª–∏ –∏–º—è —Å—Ç–∞–ª–æ –ø—É—Å—Ç—ã–º, –¥–∞–µ–º –µ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–º—è
    if not stem:
        stem = "document"

    return stem + '.docx'


def get_source_files_info():
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ"""
    files_info = []

    try:
        print("\nüìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏...")

        if not SOURCE_DIR.exists():
            print(f"‚ùå –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {SOURCE_DIR}")
            return []

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º scandir –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        for entry in os.scandir(SOURCE_DIR):
            if entry.is_file():
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
                    file_stat = entry.stat()
                    file_info = {
                        'path': entry.path,
                        'name': entry.name,
                        'size': file_stat.st_size,
                        'mtime': file_stat.st_mtime
                    }

                    print(f"  ‚Ä¢ –§–∞–π–ª: '{entry.name}'")
                    print(f"    - –†–∞–∑–º–µ—Ä: {file_info['size']} –±–∞–π—Ç ({file_info['size'] / 1024:.2f} –ö–ë)")
                    print(f"    - –ò–∑–º–µ–Ω—ë–Ω: {datetime.fromtimestamp(file_info['mtime'])}")

                    files_info.append(file_info)
                except Exception as e:
                    print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ {entry.name}: {e}")

        print(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files_info)}")
        return files_info

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
        log_action("SCAN", "", "", "", "ERROR", str(e))
        return []


def create_buffer_files_map(buffer_dir):
    """–°–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Ñ–∞–π–ª–æ–≤ –∏–∑ –±—É—Ñ–µ—Ä–Ω–æ–π –ø–∞–ø–∫–∏ —Å –∫–ª—é—á–∞–º–∏ (—Ä–∞–∑–º–µ—Ä, –≤—Ä–µ–º—è_–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏)"""
    print(f"üîÑ –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –±—É—Ñ–µ—Ä–Ω–æ–π –ø–∞–ø–∫–µ {buffer_dir}...")
    buffer_files_map = defaultdict(list)
    files_count = 0

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º os.scandir –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for entry in os.scandir(buffer_dir):
            if entry.is_file():
                try:
                    file_stat = entry.stat()
                    size = file_stat.st_size
                    # –û–∫—Ä—É–≥–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                    mtime_rounded = round(file_stat.st_mtime)
                    buffer_files_map[(size, mtime_rounded)].append(entry.path)
                    files_count += 1

                    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
                    if files_count % 1000 == 0:
                        print(f"  ‚Ä¢ –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_count}")

                except Exception as e:
                    print(f"  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {entry.name}: {e}")

        print(f"‚úÖ –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {files_count}")
        return buffer_files_map
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ –±—É—Ñ–µ—Ä–Ω–æ–π –ø–∞–ø–∫–∏: {e}")
    return buffer_files_map


def find_matching_file_in_buffer(source_file, buffer_files_map):
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–º –ø–µ—Ä–µ–¥–∞–ª–∏ - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        if isinstance(source_file, dict):
            # –ï—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å, –±–µ—Ä–µ–º —Ä–∞–∑–º–µ—Ä –∏ –≤—Ä–µ–º—è –∏–∑ –Ω–µ–≥–æ
            size = source_file['size']
            mtime_rounded = round(source_file['mtime'])
        else:
            # –ï—Å–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –ø–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            file_stat = os.stat(source_file)
            size = file_stat.st_size
            mtime_rounded = round(file_stat.st_mtime)

        # –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –≤—Ä–µ–º–µ–Ω–∏
        key = (size, mtime_rounded)
        if key in buffer_files_map and buffer_files_map[key]:
            matching_file = buffer_files_map[key][0]
            # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ
            buffer_files_map[key].pop(0)
            return matching_file

        # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–µ—Ç, –∏—â–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä–∞ (¬±1%)
        # –∏ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ (¬±10 —Å–µ–∫—É–Ω–¥)
        for potential_key, files in buffer_files_map.items():
            if not files:
                continue

            potential_size, potential_time = potential_key

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–∞ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1%)
            size_diff_percent = abs(potential_size - size) / max(size, 1) * 100
            time_diff_seconds = abs(potential_time - mtime_rounded)

            if size_diff_percent <= 1 and time_diff_seconds <= 10:
                matching_file = files[0]
                files.pop(0)
                return matching_file

        # –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
        return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –±—É—Ñ–µ—Ä–Ω–æ–π –ø–∞–ø–∫–µ: {e}")
        return None


def process_files(source_dir, buffer_dir, output_dir, test_mode=False):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª—ã –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–µ, –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –±—É—Ñ–µ—Ä–µ –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –∏—Ö"""
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Ñ–∞–π–ª–æ–≤ –∏–∑ –±—É—Ñ–µ—Ä–Ω–æ–π –ø–∞–ø–∫–∏
    print(f"üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Ñ–∞–π–ª–æ–≤ –∏–∑ –±—É—Ñ–µ—Ä–Ω–æ–π –ø–∞–ø–∫–∏...")
    buffer_files_map = create_buffer_files_map(buffer_dir)
    print(f"üìä –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –±—É—Ñ–µ—Ä–µ: {sum(len(files) for files in buffer_files_map.values())}")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
    source_files_info = get_source_files_info()
    print(f"üìÑ –§–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(source_files_info)}")

    matched_count = 0
    processed_count = 0

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for file_info in source_files_info:
        filename = file_info['name']

        # –ï—Å–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
        if test_mode and processed_count > 0:
            break

        print(f"\nüîç –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ '{filename}'")
        print(f"  ‚Ä¢ –†–∞–∑–º–µ—Ä –æ—Ä–∏–≥–∏–Ω–∞–ª–∞: {file_info['size']} –±–∞–π—Ç")
        print(f"  ‚Ä¢ –í—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {datetime.fromtimestamp(file_info['mtime'])}")

        matching_file = find_matching_file_in_buffer(file_info, buffer_files_map)

        if matching_file:
            # –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            Path(output_dir).mkdir(exist_ok=True, parents=True)

            # –°–æ–∑–¥–∞–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            clean_name = clean_filename(filename)
            new_filepath = Path(output_dir) / clean_name

            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            counter = 1
            while new_filepath.exists():
                name_stem = Path(clean_name).stem
                name_stem = re.sub(r'_\d+$', '', name_stem)  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏
                new_name = f"{name_stem}_{counter}.docx"
                new_filepath = Path(output_dir) / new_name
                counter += 1

            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –∏–∑ –±—É—Ñ–µ—Ä–∞ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
            shutil.copy2(matching_file, new_filepath)
            matched_count += 1
            print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {matching_file} -> {new_filepath}")
            log_action("COPY", filename, Path(matching_file).name, new_filepath.name, "SUCCESS")
        else:
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —Ñ–∞–π–ª–∞ {filename}")
            log_action("MATCH", filename, "", "", "ERROR", "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±—É—Ñ–µ—Ä–µ")

        processed_count += 1

    print(f"\nüìä –ò—Ç–æ–≥–∏: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} —Ñ–∞–π–ª–æ–≤, –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {matched_count}")
    return matched_count


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"üîÑ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üìÅ –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {SOURCE_DIR}")
    print(f"üìÅ –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞: {DESTINATION_DIR}")
    print(f"üìÅ –ë—É—Ñ–µ—Ä–Ω–∞—è –ø–∞–ø–∫–∞: {TEMP_DIR}")

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if not setup_environment():
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª) –∏–ª–∏ –ø–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º
    test_mode = False  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ True –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    print(
        f"üß™ {'–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª...' if test_mode else '–ü–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã...'}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    start_time = datetime.now()
    matched_count = process_files(SOURCE_DIR, TEMP_DIR, DESTINATION_DIR, test_mode=test_mode)
    end_time = datetime.now()

    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {(end_time - start_time).total_seconds():.2f} —Å–µ–∫—É–Ω–¥")
    print(f"\nüìù –î–µ—Ç–∞–ª–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª–µ: {LOG_FILE}")
    print(f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")


if __name__ == "__main__":
    main()